# ===========================================================================
# Casbin Policy: RESTful API Authorization
#
# Format: p, subject (role OR membership), resource_path, action (HTTP method), effect
# ===========================================================================

# ---------------------------------------------------------------------------
# 1. GLOBAL SUPERUSER ROLE
# The President has unrestricted access to the entire system.
# ---------------------------------------------------------------------------
p, role_president, /*, *, allow


# ---------------------------------------------------------------------------
# 2. BASELINE ACCESS FOR AUTHENTICATED USERS
# Permissions granted based on general membership status.
# ---------------------------------------------------------------------------
# Any MEMBER, VOLUNTEER, or DONOR can view general information.
p, MEMBER, /chapters, GET, allow
p, MEMBER, /committees, GET, allow
p, MEMBER, /events, GET, allow
p, MEMBER, /events/:id, GET, allow
p, MEMBER, /projects, GET, allow
p, MEMBER, /projects/:id, GET, allow

p, VOLUNTEER, /chapters, GET, allow
p, VOLUNTEER, /committees, GET, allow
p, VOLUNTEER, /events, GET, allow
p, VOLUNTEER, /events/:id, GET, allow

p, DONOR, /chapters, GET, allow
p, DONOR, /events, GET, allow


# ---------------------------------------------------------------------------
# 3. SELF-SERVICE ACTIONS (Constituent Profiles)
# Users can manage their own profiles.
# NOTE: Your API handler MUST verify that the :id in the URL matches the authenticated user's ID.
# ---------------------------------------------------------------------------
p, MEMBER, /constituents/:id, GET, allow
p, MEMBER, /constituents/:id, PUT, allow
p, VOLUNTEER, /constituents/:id, GET, allow
p, VOLUNTEER, /constituents/:id, PUT, allow
p, DONOR, /constituents/:id, GET, allow
p, DONOR, /constituents/:id, PUT, allow


# ---------------------------------------------------------------------------
# 4. RESOURCE-SPECIFIC PERMISSIONS (By Role & Membership)
# ---------------------------------------------------------------------------

# -- EVENTS & PROJECTS --
# 'role_organizer' can create, manage, and delete events and projects.
p, role_organizer, /events, POST, allow
p, role_organizer, /events/:id, PUT, allow
p, role_organizer, /events/:id, DELETE, allow
p, role_organizer, /projects, POST, allow
p, role_organizer, /projects/:id, PUT, allow
p, role_organizer, /projects/:id, DELETE, allow

# VOLUNTEERS and MEMBERS can sign up for event participation.
p, VOLUNTEER, /events/:id/participations, POST, allow
p, MEMBER, /events/:id/participations, POST, allow
p, VOLUNTEER, /events/:id/participations, DELETE, allow # Can cancel their own participation
p, MEMBER, /events/:id/participations, DELETE, allow


# -- FINANCE (Highly Restricted) --
# 'role_financial_secretary' has full control over the finance module.
p, role_financial_secretary, /finance/*, *, allow

# 'AUDITOR' membership grants read-only access to all financial records for oversight.
p, AUDITOR, /finance/*, GET, allow

# DONORS can make a donation (a POST to the donations endpoint).
p, DONOR, /finance/donations, POST, allow
# Any user with a donor history can view their own past donations.
p, DONOR, /constituents/:id/donations, GET, allow


# -- COMMUNICATIONS --
# 'role_secretary' manages meetings and announcements.
p, role_secretary, /communications/*, *, allow

# Regular MEMBERS can view announcements and meeting details.
p, MEMBER, /communications/announcements, GET, allow
p, MEMBER, /communications/meetings, GET, allow
p, MEMBER, /communications/meetings/:id, GET, allow


# -- CHAPTER & COMMITTEE MANAGEMENT (Scoped Roles) --
# NOTE: Your middleware will need to verify that the user with the role belongs to the specified chapter/committee.
p, role_chapter_head, /chapters/:id, PUT, allow
p, role_chapter_head, /chapters/:id/members, *, allow # Manage members of their chapter
p, role_chapter_head, /chapters/:id/projects, POST, allow # Can start projects in their chapter

p, role_committee_head, /committees/:id, PUT, allow
p, role_committee_head, /committees/:id/members, *, allow # Manage members of their committee